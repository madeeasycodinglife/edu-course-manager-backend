#version: '3.8'

services:

  # Zookeeper from Confluent
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - microservices-network

  # Kafka from Confluent
  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    restart: unless-stopped
    networks:
      - microservices-network

  # Redis
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - microservices-network

  # Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped
    networks:
      - microservices-network

  # Eureka Server
  eureka-server:
    image: pabitrabera2001/eureka-server
    container_name: eureka-server
    environment:
      - SERVER_PORT=8761
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - zipkin
    ports:
      - "8761:8761"
    restart: unless-stopped
    networks:
      - microservices-network
    pull_policy: always

  # Config Server
  config-server:
    image: pabitrabera2001/config-server
    container_name: config-server
    environment:
      - SERVER_PORT=8888
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - zookeeper
      - kafka
      - zipkin
      - eureka-server
    ports:
      - "8888:8888"
    restart: unless-stopped
    networks:
      - microservices-network
    pull_policy: always


  # Auth Service
  auth-service:
    image: pabitrabera2001/auth-service
    container_name: auth-service
    environment:
      - SERVER_PORT=8083
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - CONFIG_SERVER_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - zookeeper
      - kafka
      - redis
      - zipkin
      - eureka-server
      - config-server
      - spring-cloud-gateway
    ports:
      - "8083:8083"
    restart: unless-stopped
    networks:
      - microservices-network
    pull_policy: always


  # User Service
  user-service:
    image: pabitrabera2001/user-service
    container_name: user-service
    environment:
      - SERVER_PORT=8084
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - CONFIG_SERVER_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - zookeeper
      - kafka
      - redis
      - zipkin
      - eureka-server
      - config-server
      - spring-cloud-gateway
    ports:
      - "8084:8084"
    restart: unless-stopped
    networks:
      - microservices-network
    pull_policy: always


  # Course Service
  course-service:
    image: pabitrabera2001/course-service
    container_name: course-service
    environment:
      - SERVER_PORT=8081
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - CONFIG_SERVER_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - zookeeper
      - kafka
      - redis
      - zipkin
      - eureka-server
      - config-server
      - spring-cloud-gateway
    ports:
      - "8081:8081"
    restart: unless-stopped
    networks:
      - microservices-network
    pull_policy: always


  # Instance Service
  instance-service:
    image: pabitrabera2001/instance-service
    container_name: instance-service
    environment:
      - SERVER_PORT=8082
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - CONFIG_SERVER_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - zookeeper
      - kafka
      - redis
      - zipkin
      - eureka-server
      - config-server
      - spring-cloud-gateway
    ports:
      - "8082:8082"
    restart: unless-stopped
    networks:
      - microservices-network
    pull_policy: always



  # Spring Cloud Gateway
  spring-cloud-gateway:
    image: pabitrabera2001/spring-cloud-gateway
    container_name: spring-cloud-gateway
    environment:
      - SERVER_PORT=8080
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - CONFIG_SERVER_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
    depends_on:
      - zookeeper
      - kafka
      - redis
      - zipkin
      - eureka-server
      - config-server
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - microservices-network
    pull_policy: always

networks:
  microservices-network:
    driver: bridge
