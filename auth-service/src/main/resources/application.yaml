
server:
  port: 8083

spring:
  application:
    name: auth-service
  output:
    ansi:
      enabled: ALWAYS
  threads:
    virtual:
      enabled: true

  datasource:
    url: jdbc:h2:mem:auth-service
    username: sa
    password: sa
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  h2:
    console:
      enabled: true

  mvc:
    throw-exception-if-no-handler-found: true
  web:
    resources:
      add-mappings: false

security:
  authorization:
    paths:
      - path: /auth-service/sign-up
        method: POST
        roles: []
      - path: /auth-service/sign-in
        method: POST
        roles: []
      - path: /auth-service/log-out
        method: POST
        roles: []
      - path: /auth-service/validate-access-token/**
        method: POST
        roles: []
      - path: /auth-service/refresh-token/**
        method: POST
        roles: []
      - path: /auth-service/partial-update/**
        method: PATCH
        roles: []





eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    registry-fetch-interval-seconds: 2
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 3
    lease-expiration-duration-in-seconds: 5


management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    circuitbreakers:
      enabled: true  #To show Circuit Breaker status in /health endpoint.
  endpoint:
    health:
      show-details: ALWAYS  #To show all details in /health endpoint.


resilience4j:
  circuitbreaker:
    instances:
      myCircuitBreaker:
        registerHealthIndicator: true
        failureRateThreshold: 20
        minimumNumberOfCalls: 5
        slidingWindowSize: 10
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slidingWindowType: COUNT_BASED

  retry:
    instances:
      myRetry:
        registerHealthIndicator: true
        retryCount: 3
        waitDuration: 2s
