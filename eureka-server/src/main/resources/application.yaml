server:
  port: ${SERVER_PORT:8761}

spring:
  application:
    name: ${SPRING_APPLICATION_NAME:eureka-server}
  output:
    ansi:
      enabled: ALWAYS
  threads:
    virtual:
      enabled: ${SPRING_THREADS_VIRTUAL_ENABLED:true}

eureka:
  client:
    register-with-eureka: ${EUREKA_CLIENT_REGISTER_WITH_EUREKA:false}
    fetch-registry: ${EUREKA_CLIENT_FETCH_REGISTRY:false}

  server:
    # Whether Eureka Server should self-preserve during network partitions.
    enable-self-preservation: ${EUREKA_SERVER_ENABLE_SELF_PRESERVATION:true}

    # Time in milliseconds for reading from peer nodes.
    peer-node-read-timeout-ms: ${EUREKA_SERVER_PEER_NODE_READ_TIMEOUT_MS:60000} # Set to 60 seconds; adjust as needed based on network latency and load.

    # Time in milliseconds for establishing a connection with peer nodes.
    peer-node-connect-timeout-ms: ${EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS:8000} # Set to 8 seconds; adjust based on network conditions and expected response times.

    # Time in seconds for keeping idle connections to peer nodes open.
    peer-node-connection-idle-timeout-seconds: ${EUREKA_SERVER_PEER_NODE_CONNECTION_IDLE_TIMEOUT_SECONDS:60} # Set to 60 seconds; adjust based on connection usage patterns and resource constraints.


management:
  endpoints:
    web:
      exposure:
        include: ${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:*}


  tracing:
    enabled: ${MANAGEMENT_TRACING_ENABLED:true}
    sampling:
      probability: ${MANAGEMENT_TRACING_SAMPLING_PROBABILITY:1.0}
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_TRACING_ENDPOINT:http://localhost:9411/api/v2/spans}

logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:info}
    com.netflix.discovery: ${LOGGING_LEVEL_NETFLIX_DISCOVERY:info}
    com.netflix.eureka: ${LOGGING_LEVEL_NETFLIX_EUREKA:info}
    org.springframework.cloud.netflix.eureka.server: ${LOGGING_LEVEL_SPRING_CLOUD_NETFLIX_EUREKA_SERVER:info}
